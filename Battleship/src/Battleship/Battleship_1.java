package Battleship;
/*
 * This is a project in which I attempt to recreate the famous Battleship board game. It will eventually be able to play against another person and not just the computer.
 * Phase 1: try to sink the computer's battleship(s)
 * Phase 2: You try to sink opponents batttleship (opponent only sets the location of battleships)
 * Phase 3: A full version of battleship in which you and opponent set and destry battleships. 
 * Phase 4: Phase 1 + computer tries to sink your battleships.
 */

import java.io.*;
import java.util.ArrayList;
import java.util.List;

/**
 * @author fazer
 */
public class Battleship_1 extends javax.swing.JFrame {

    BufferedReader hi = new BufferedReader(new InputStreamReader(System.in));
    String input;
    int i = 0, column, row, position = 0, number, some_number, another_number;
    String[][] coordinates = new String[10][10];
    int[][] X = new int[4][3], Y = new int[4][3];
    List<Integer> x = new ArrayList<>(), y = new ArrayList<>();
    /**
     * Creates new form Battleship_1
     */
    public Battleship_1() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fire_button = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        output_text = new javax.swing.JTextArea();
        input_text_field = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Enter target coordinate:");

        fire_button.setText("FIRE");
        fire_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fire_buttonActionPerformed(evt);
            }
        });

        output_text.setEditable(false);
        output_text.setColumns(14);
        output_text.setRows(14);
        jScrollPane2.setViewportView(output_text);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(input_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fire_button, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fire_button)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(input_text_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fire_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fire_buttonActionPerformed
        int vh = ((int) (Math.random() * 1));
        if (vh == 0) {
            for (column = 0; column < 10; column++) {
                for (row = 0; row < 10; row++) {
                    coordinates[row][column] = "~ ";
                }
            }
            for (number = 0; number < 4; number++) {
                X[number][0] = ((int) (Math.random() * 9));
                Y[number][0] = ((int) (Math.random() * 9));
                if (X[number][0] == 9) {
                    X[number][1] = X[number][position] - 1;
                    X[number][2] = X[number][position] + 1;
                } else if (X[number][0] == 10) {
                    X[number][1] = X[number][position] - 1;
                    X[number][2] = X[number][position] - 2;
                } else {
                    X[number][1] = X[number][position] + 1;
                    X[number][2] = X[number][position] + 2;
                }
                //System.out.println(X[number][0] +" " +Y[number][0]);
            }
            while (i >= 0) {
                input = input_text_field.getText();
                String[] coordinate = input.split(",");
                x.add(Integer.parseInt(coordinate[0]));
                y.add(Integer.parseInt(coordinate[1]));
                for (number = 0; number < 4; number++) {
                    for (position = 0; position < 3; position++) {
                        if (X[number][position] == (x.get(i)) && Y[number][0] == (y.get(i))) {
                            coordinates[x.get(i)][y.get(i)] = "X ";
                        } else if (coordinates[x.get(i)][y.get(i)].equals("X ")) {

                        } else {
                            coordinates[x.get(i)][y.get(i)] = "O ";
                        }
                    }
                }
                i++;
                output_text.setText("\n" + "Missiles used:" + i);
                for (column = -1; column < 10; column++) {
                    if (column > -1) {
                        output_text.append(column + " ");
                    }
                    for (row = 0; row < 10; row++) {
                        if (column == -1) {
                            if (row == 0) {
                                output_text.append(" ");
                            }
                            output_text.append(" " + row);
                        } else {
                            output_text.append(coordinates[row][column]);
                        }
                    }
                    if (row == 10) {
                        output_text.append("\n");
                    }
                }
                for (some_number = 0; some_number < x.size(); some_number++) {
                    if (coordinates[x.get(some_number)][y.get(some_number)].equals("X ")) {
                        another_number++;
                    }
                }
                if (another_number == 12) {
                    break;
                }
            }
        }
        else {
            for (column = 0; column < 10; column++) {
                for (row = 0; row < 10; row++) {
                    coordinates[row][column] = "~ ";
                }
            }
            for (number = 0; number < 4; number++) {
                position = 0;
                X[number][position] = ((int) (Math.random() * 9));
                Y[number][position] = ((int) (Math.random() * 9));
                if (Y[number][position] == 9) {
                    Y[number][position + 1] = Y[number][position] - 1;
                    Y[number][position + 2] = Y[number][position] + 1;
                } else if (Y[number][position] == 10) {
                    Y[number][position + 1] = Y[number][position] - 1;
                    Y[number][position + 2] = Y[number][position] - 2;
                } else {
                    Y[number][position + 1] = Y[number][position] + 1;
                    Y[number][position + 2] = Y[number][position] + 2;
                }
                System.out.println(X[number][0] + " " + Y[number][0]);
            }
            while (i >= 0) {
                input = input_text_field.getText();
                String[] coordinate = input.split(",");
                x.add(Integer.parseInt(coordinate[0]));
                y.add(Integer.parseInt(coordinate[1]));
                for (number = 0; number < 4; number++) {
                    for (position = 0; position < 3; position++) {
                        if (X[number][0] == (x.get(i)) && Y[number][position] == (y.get(i))) {
                            coordinates[x.get(i)][y.get(i)] = "X ";
                        } else if (coordinates[x.get(i)][y.get(i)].equals("X ")) {

                        } else {
                            coordinates[x.get(i)][y.get(i)] = "O ";
                        }
                    }
                }
                i++;
                output_text.setText("\n" + "Missiles used:" + i);
                for (column = -1; column < 10; column++) {
                    if (column > -1) {
                        output_text.append(column + " ");
                    }
                    for (row = 0; row < 10; row++) {
                        if (column == -1) {
                            if (row == 0) {
                                output_text.append(" ");
                            }
                            output_text.append(" " + row);
                        } else {
                            output_text.append(coordinates[row][column]);
                        }
                    }
                    if (row == 10) {
                        output_text.append("\n");
                    }
                }
                for (some_number = 0; some_number < x.size(); some_number++) {
                    if (coordinates[x.get(some_number)][y.get(some_number)] == "X ") {
                        another_number++;
                    }
                }
                if (another_number == 12) {
                    break;
                }
            }

        }


    }//GEN-LAST:event_fire_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Battleship_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Battleship_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Battleship_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Battleship_1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Battleship_1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fire_button;
    private javax.swing.JTextField input_text_field;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea output_text;
    // End of variables declaration//GEN-END:variables
}
